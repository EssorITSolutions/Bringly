@model Bringly.Domain.ComposeEmail
@{
    Layout = "~/Views/Shared/MasterPages/PartialMaster.cshtml";
}
@if (ViewBag.IspopUp != null)
{
    <script>
        window.parent.closeModelPopUpFormCompose('@ViewBag.Ismessagesent');
    </script>
}
else
{
    <form method="post" action="/Email/ComposeEmail" style="width:100%;" ValidateRequest="false" class="compose-form">
        @Html.HiddenFor(m => m.Isemailreplyorforward)
        <div class="mail-box">
            <div class="form-group">
                @Html.DropDownListFor(m => m.EmailToGuid, Model.UserContactList.Select(x => new SelectListItem { Text = x.FullName, Value = x.UserGuid.ToString() }), "To", new { @class = "chosen-select", @placeholder = "Choose a user.." })
                @Html.ValidationMessageFor(m => m.EmailMessage.EmailToGuid)
            </div>
            <div class="form-group">
                @Html.TextBoxFor(m => m.EmailMessage.Subject, new { @class = "form-control", @placeholder = "Subject", @maxlength = "200" })
                @Html.ValidationMessageFor(m => m.EmailMessage.Subject)
            </div>
            <div class="form-group">
                @Html.TextAreaFor(m => m.EmailMessage.Body, new { @class = "form-control", @placeholder = "Message" })
                @Html.ValidationMessageFor(m => m.EmailMessage.Body)
            </div>
            <div class="form-group form-button text-center">
                <input type="submit" onclick="return checkComposeEmailTo();" class="btn btn-primary" value="Send" />
                <input type="button" onclick="window.parent.closeModelPopUpForm(false)" class="btn btn-primary" value="Cancel" />
            </div>
        </div>
    </form>
}
@section PageFooterResources{
    <script>
        $(document).ready(function () {
            var editor = CKEDITOR.replace('EmailMessage_Body');
            if ($('#EmailMessage_Body').val() == '') {
                $('#EmailMessage_Body').val('');
            }
            CKEDITOR.on('instanceReady', function () {
                $.each(CKEDITOR.instances, function (instance) {
                    CKEDITOR.instances[instance].on("change",
                        function (e) {
                            for (instance in CKEDITOR.instances
                            )
                                CKEDITOR.instances[instance].updateElement();
                        });
                });
            });
            CKEDITOR.autoGrow_onStartup = true;
            CKEDITOR.config.height = 205;
            CKEDITOR.config.resize_enabled = false;
        });
    </script>
}